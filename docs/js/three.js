import{p as e,g as t,s as i}from"../main.js";import{AnimationMixer as r}from"./three.module.js";import{G as o}from"./GLTFLoader.js";export{G as GLTFLoader,a as addSkybox,s as spawnModel}from"./GLTFLoader.js";export{loadReticle}from"./loadReticle.js";const n=({camera:e,renderer:t})=>()=>{e.aspect=W.innerWidth/W.innerHeight,e.updateProjectionMatrix(),t.setSize(W.innerWidth,W.innerHeight)};let l=null,c=!1;const d=e=>async(t,i)=>{const{camera:a,clock:s,mixer:r,reflect:o,renderer:n,reticle:d,scene:m}=e;if(i){const e=n.xr.getSession();if(!1===c){const t=await e.requestReferenceSpace("viewer"),i=await e.requestHitTestSource({space:t});l=i,e.addEventListener("end",()=>{c=!1,l=null}),c=!0}if(l){const e=n.xr.getReferenceSpace(),t=i.getHitTestResults(l);if(t.length){if(d){const i=t[0];d.visible=!0,d.matrix.fromArray(i.getPose(e).transform.matrix)}}else d&&(d.visible=!1)}}o.target&&o.camera&&o.skybox&&(XR&&(o.skybox.visible=!0),o.target.visible=!1,o.camera.updateCubeMap(n,m),XR&&(o.skybox.visible=!1),o.target.visible=!0),r&&r.update(s.getDelta()),n.render(m,a)},m=async(i,a)=>{if(!i)throw new Error("loadModel needs { file } argument to be set.");a.show(e);const s=await((e,i,a)=>new Promise((s,r)=>{const o=`${t}/${i}`,n=(e=>t=>{if(t.total>0){const i=M.ceil(t.loaded/t.total*100);e.setContent(`${i}% ${t.loaded}/${t.total}`)}t.loaded>=t.total&&e.hide()})(a);e.load(o,s,n,r)}))(new o,i,a),n=s.scene;let l=null;return s.animations&&s.animations.length&&(l=new r(n),s.animations.forEach(e=>l.clipAction(e).play())),{model:n,mixer:l}},f=e=>{const t=$("#three-gui"),a=$("#exit-button");return t.classList.add("visible"),e={...e,gui:t,exitButton:a},a.addEventListener("click",()=>{t.classList.remove("visible"),i.end(e)}),t};export{m as loadModel,n as onWindowResize,d as render,f as showHUD};
