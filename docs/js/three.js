import{p as e,g as t,s as i}from"../main.js";import{AnimationMixer as o}from"./three.module.js";import{G as r}from"./GLTFLoader.js";export{G as GLTFLoader,a as addSkybox,s as spawnModel}from"./GLTFLoader.js";export{loadReticle}from"./loadReticle.js";const n=({camera:e,renderer:t})=>()=>{e.aspect=window.innerWidth/window.innerHeight,e.updateProjectionMatrix(),t.setSize(window.innerWidth,window.innerHeight)};let l=null,d=!1;const c=e=>async(t,i)=>{const{camera:a,clock:o,mixer:r,reflect:n,renderer:s,reticle:c,scene:m,xrSupported:u}=e;if(i){const e=s.xr.getSession();if(!1===d){const t=await e.requestReferenceSpace("viewer"),i=await e.requestHitTestSource({space:t});l=i,e.addEventListener("end",()=>{d=!1,l=null}),d=!0}if(l){const e=s.xr.getReferenceSpace(),t=i.getHitTestResults(l);if(t.length){if(c){const i=t[0];c.visible=!0,c.matrix.fromArray(i.getPose(e).transform.matrix)}}else c&&(c.visible=!1)}}n.target&&n.camera&&n.skybox&&(u&&(n.skybox.visible=!0),n.target.visible=!1,n.camera.updateCubeMap(s,m),u&&(n.skybox.visible=!1),n.target.visible=!0),r&&r.update(o.getDelta()),s.render(m,a)},m=async(i,a)=>{if(!i)throw new Error("loadModel needs { file } argument to be set.");a.show(e);const n=await((e,i,a)=>new Promise((o,r)=>{const n=`${t}/${i}`,s=(e=>t=>{if(t.total>0){const i=Math.ceil(t.loaded/t.total*100);e.setContent(`${i}% ${t.loaded}/${t.total}`)}t.loaded>=t.total&&e.hide()})(a);e.load(n,o,s,r)}))(new r,i,a),s=n.scene;let l=null;return n.animations&&n.animations.length&&(l=new o(s),n.animations.forEach(e=>l.clipAction(e).play())),{model:s,mixer:l}},u=e=>{const t=document.getElementById("three-gui"),a=document.getElementById("exit-button");return t.classList.add("visible"),e={...e,gui:t,exitButton:a},a.addEventListener("click",()=>{t.classList.remove("visible"),i.end(e)}),t};export{m as loadModel,n as onWindowResize,c as render,u as showHUD};
